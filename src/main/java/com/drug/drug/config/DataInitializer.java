package com.drug.drug.config;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;

import com.drug.drug.entity.Answer;
import com.drug.drug.entity.Course;
import com.drug.drug.entity.Question;
import com.drug.drug.entity.Test;
import com.drug.drug.entity.User;
import com.drug.drug.repository.AnswerRepository;
import com.drug.drug.repository.CourseRepository;
import com.drug.drug.repository.QuestionRepository;
import com.drug.drug.repository.TestRepository;
import com.drug.drug.repository.UserRepository;

@Configuration
public class DataInitializer {

    // Bean n√†y gi·ªØ nguy√™n ƒë·ªÉ kh·ªüi t·∫°o User
    @Bean
    CommandLineRunner initUsers(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        return args -> {
            if (!userRepository.existsByUsername("admin123")) {
                User admin = new User();
                admin.setUsername("admin123");
                // Quan tr·ªçng: S·ª≠ d·ª•ng NoOpPasswordEncoder n√™n kh√¥ng c·∫ßn encode
                // N·∫øu b·∫°n ƒë·ªïi l·∫°i BCrypt th√¨ b·ªè comment d√≤ng d∆∞·ªõi v√† x√≥a d√≤ng tr√™n
                admin.setPassword("admin123");
                // admin.setPassword(passwordEncoder.encode("admin123"));
                admin.setRole("admin");
                admin.setEmail("admin@example.com");
                admin.setSdt("0123456789");
                admin.setAddress("Admin Address");
                admin.setSex("Other");
                admin.setBirthday(java.time.LocalDate.of(2000, 1, 1));
                userRepository.save(admin);
                System.out.println("‚úÖ Admin user initialized: username=admin123, password=admin123");
            } else {
                System.out.println("‚úÖ Admin user already exists.");
            }

            if (!userRepository.existsByUsername("member123")) {
                User member = new User();
                member.setUsername("member123");
                member.setPassword("member123");
                // member.setPassword(passwordEncoder.encode("member123"));
                member.setRole("member");
                member.setEmail("member123@example.com");
                member.setSdt("0987654321");
                member.setAddress("Member Address");
                member.setSex("Nam");
                member.setBirthday(java.time.LocalDate.of(2002, 5, 20));
                userRepository.save(member);
                System.out.println("‚úÖ Member user initialized: username=member123, password=member123");
            } else {
                System.out.println("‚úÖ Member user already exists.");
            }

            if (!userRepository.existsByUsername("bs.vananh")) {
                System.out.println("üå± Initializing consultants (doctors)...");
                createDoctor(userRepository, "bs.vananh", "V√¢n Anh", "vananh.bs@drug.com", "/images/doctor1.jpg");
                createDoctor(userRepository, "bs.minhquan", "Minh Qu√¢n", "minhquan.bs@drug.com", "/images/doctor2.jpg");
                createDoctor(userRepository, "ts.thuhang", "Thu H·∫±ng", "thuhang.ts@drug.com", "/images/doctor3.jpg");
                createDoctor(userRepository, "bs.hoangnam", "Ho√†ng Nam", "hoangnam.bs@drug.com", "/images/doctor4.jpg");
                createDoctor(userRepository, "ths.maiphuong", "Mai Ph∆∞∆°ng", "maiphuong.ths@drug.com", "/images/doctor5.jpg");
                createDoctor(userRepository, "bs.quocbao", "Qu·ªëc B·∫£o", "quocbao.bs@drug.com", "/images/doctor6.jpg");
                createDoctor(userRepository, "bs.ngoclan", "Ng·ªçc Lan", "ngoclan.bs@drug.com", "/images/doctor7.jpg");
                createDoctor(userRepository, "ts.thanhphong", "Thanh Phong", "thanhphong.ts@drug.com", "/images/doctor8.jpg");
                createDoctor(userRepository, "bs.diemquynh", "Di·ªÖm Qu·ª≥nh", "diemquynh.bs@drug.com", "/images/doctor9.jpg");
                createDoctor(userRepository, "ths.tuananh", "Tu·∫•n Anh", "tuananh.ths@drug.com", "/images/doctor10.jpg");
                System.out.println("‚úÖ 10 consultants initialized.");
            } else {
                System.out.println("‚úÖ Consultants already exist.");
            }
        };
    }


    // Bean m·ªõi ƒë·ªÉ kh·ªüi t·∫°o d·ªØ li·ªáu Test, Question, Answer
    @Bean
    @Transactional // ƒê·∫£m b·∫£o t·∫•t c·∫£ ho·∫°t ƒë·ªông trong m·ªôt giao d·ªãch
    CommandLineRunner initTests(TestRepository testRepository, QuestionRepository questionRepository, AnswerRepository answerRepository) {
        return args -> {
            // Ch·ªâ ch·∫°y n·∫øu ch∆∞a c√≥ b√†i test n√†o

            if (testRepository.count() > 0) {
                System.out.println("‚úÖ Tests/Surveys already initialized.");
                return;
            }

            // --- T·∫†O B√ÄI KH·∫¢O S√ÅT ASSIST ---
            Test assistTest = createTest(
                    "Kh·∫£o s√°t ASSIST",
                    "S√†ng l·ªçc c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng ch·∫•t g√¢y nghi·ªán.",
                    "ƒê√°nh gi√° m·ª©c ƒë·ªô",
                    "Nh·∫≠n th·ª©c v·ªÅ ma t√∫y",
                    "https://i.ytimg.com/vi/a_frdvO7f44/maxresdefault.jpg", // ƒê∆∞·ªùng d·∫´n ·∫£nh (b·∫°n c·∫ßn c√≥ ·∫£nh n√†y trong static/images)
                    8,
                    testRepository
            );

            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng thu·ªëc l√° kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng ƒë·ªì u·ªëng c√≥ c·ªìn (bia, r∆∞·ª£u) kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng c·∫ßn sa kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng cocain, ma t√∫y ƒë√° (h√†ng ƒë√°, ch·∫•m ƒë√°) kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng c√°c ch·∫•t k√≠ch th√≠ch d·∫°ng amphetamine (thu·ªëc l·∫Øc, ectasy) kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng thu·ªëc ng·ªß ho·∫∑c thu·ªëc an th·∫ßn m√† kh√¥ng c√≥ ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ© kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ h√≠t c√°c ch·∫•t g√¢y ·∫£o gi√°c (keo, xƒÉng, ete...) kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(assistTest, "Trong 3 th√°ng qua, b·∫°n c√≥ s·ª≠ d·ª•ng thu·ªëc phi·ªán, heroin, morphin... kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);

            System.out.println("‚úÖ ASSIST Survey initialized.");

            // --- T·∫†O B√ÄI TEST CRAFFT ---
            Test crafftTest = createTest(
                    "B√†i test CRAFFT",
                    "C√¥ng c·ª• s√†ng l·ªçc ng·∫Øn g·ªçn cho thanh thi·∫øu ni√™n v·ªÅ nguy c∆° l·∫°m d·ª•ng ch·∫•t.",
                    "Tr·∫Øc nghi·ªám",
                    "T√¢m l√Ω - h√†nh vi",
                    "https://cdn.thuvienphapluat.vn/phap-luat/2022-2/NHBT/14032025/tu-1-7-2025-su-dung-ma-tuy-di-tu-bao-nhieu-nam.jpg", // ƒê∆∞·ªùng d·∫´n ·∫£nh
                    8,
                    testRepository
            );

            createQuestion(crafftTest, "B·∫°n ƒë√£ bao gi·ªù ƒëi tr√™n m·ªôt chi·∫øc XE (Car) do ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng r∆∞·ª£u bia ho·∫∑c ch·∫•t k√≠ch th√≠ch (k·ªÉ c·∫£ b·∫°n) l√°i ch∆∞a?", List.of(
                    createAnswer("Ch∆∞a bao gi·ªù", false),
                    createAnswer("ƒê√£ t·ª´ng", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ bao gi·ªù d√πng r∆∞·ª£u bia hay ch·∫•t k√≠ch th√≠ch ƒë·ªÉ TH∆Ø GI√ÉN (Relax), ƒë·ªÉ c·∫£m th·∫•y t·ª± tin h∆°n, ho·∫∑c ƒë·ªÉ h√≤a nh·∫≠p v·ªõi b·∫°n b√® kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ bao gi·ªù s·ª≠ d·ª•ng r∆∞·ª£u bia/ch·∫•t k√≠ch th√≠ch khi ·ªü M·ªòT M√åNH (Alone) kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng", false),
                    createAnswer("C√≥", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ bao gi·ªù QU√äN (Forget) nh·ªØng g√¨ ƒë√£ l√†m khi ƒëang s·ª≠ d·ª•ng r∆∞·ª£u bia/ch·∫•t k√≠ch th√≠ch kh√¥ng?", List.of(
                    createAnswer("Ch∆∞a t·ª´ng qu√™n", false),
                    createAnswer("ƒê√£ t·ª´ng qu√™n", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "GIA ƒê√åNH (Family) ho·∫∑c B·∫†N B√à (Friends) c√≥ bao gi·ªù b·∫£o b·∫°n n√™n c·∫Øt gi·∫£m vi·ªác s·ª≠ d·ª•ng r∆∞·ª£u bia/ch·∫•t k√≠ch th√≠ch kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng ai n√≥i g√¨", false),
                    createAnswer("C√≥, h·ªç ƒë√£ n√≥i", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ bao gi·ªù g·∫∑p R·∫ÆC R·ªêI (Trouble) khi ƒëang s·ª≠ d·ª•ng r∆∞·ª£u bia/ch·∫•t k√≠ch th√≠ch kh√¥ng?", List.of(
                    createAnswer("Ch∆∞a t·ª´ng g·∫∑p r·∫Øc r·ªëi", false),
                    createAnswer("ƒê√£ t·ª´ng g·∫∑p r·∫Øc r·ªëi", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ c·∫£m th·∫•y vi·ªác s·ª≠ d·ª•ng c√°c ch·∫•t n√†y ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác h·ªçc t·∫≠p ho·∫∑c c√°c m·ªëi quan h·ªá kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng ·∫£nh h∆∞·ªüng", false),
                    createAnswer("C√≥ ·∫£nh h∆∞·ªüng", true)
            ), questionRepository, answerRepository);
            createQuestion(crafftTest, "B·∫°n c√≥ bao gi·ªù n√≥i d·ªëi v·ªÅ m·ª©c ƒë·ªô ho·∫∑c t·∫ßn su·∫•t b·∫°n s·ª≠ d·ª•ng c√°c ch·∫•t n√†y kh√¥ng?", List.of(
                    createAnswer("Kh√¥ng bao gi·ªù n√≥i d·ªëi", false),
                    createAnswer("ƒê√£ t·ª´ng n√≥i d·ªëi", true)
            ), questionRepository, answerRepository);

            System.out.println("‚úÖ CRAFFT Test initialized.");
        };
    }

    // Helper method ƒë·ªÉ t·∫°o Test
    private Test createTest(String name, String desc, String type, String topic, String image, int qCount, TestRepository repo) {
        Test test = new Test();
        test.setName(name);
        test.setDescription(desc);
        test.setType(type);
        test.setTopic(topic);
        test.setImage(image);
        test.setQuestionCount(qCount);
        test.setStatus("active");
        test.setCreatedAt(LocalDateTime.now());
        return repo.save(test);
    }

    // Helper method ƒë·ªÉ t·∫°o Question
    private void createQuestion(Test test, String content, List<Answer> answers, QuestionRepository qRepo, AnswerRepository aRepo) {
        Question question = new Question();
        question.setTestId(test.getId());
        question.setContent(content);
        Question savedQuestion = qRepo.save(question);

        for (Answer answer : answers) {
            answer.setQuestionId(savedQuestion.getId());
            aRepo.save(answer);
        }
    }

    // Helper method ƒë·ªÉ t·∫°o Answer
    private Answer createAnswer(String content, boolean isCorrect) {
        Answer answer = new Answer();
        answer.setContent(content);
        answer.setIsCorrect(isCorrect); // isCorrect d√πng ƒë·ªÉ t√≠nh ƒëi·ªÉm
        return answer;
    }

    private void createDoctor(UserRepository userRepository, String username, String fullName, String email, String avatarUrl) {
        User doctor = new User();
        doctor.setUsername(username);
        doctor.setPassword("doctor123"); // M·∫≠t kh·∫©u chung cho t·∫•t c·∫£ doctor (ƒë·ªÉ demo)
        doctor.setRole("doctor");
        doctor.setEmail(email);
        // ƒê·ªÉ ƒë∆°n gi·∫£n, c√°c th√¥ng tin kh√°c c√≥ th·ªÉ ƒë·ªÉ null ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
        doctor.setSdt("0900112233");
        doctor.setAddress("Ph√≤ng t∆∞ v·∫•n trung t√¢m");
        doctor.setSex("Kh√°c");
        doctor.setAvatar(avatarUrl); // Th√™m avatar
        userRepository.save(doctor);
    }

    private void createCourse(CourseRepository repo, String name, String desc, String target, String topic, String image, int participants, String v1, String v2, String v3) {
        Course course = new Course();
        course.setName(name);
        course.setDescription(desc);
        course.setTargetObject(target);
        course.setTopic(topic);
        course.setImage(image);
        course.setParticipants(participants);
        course.setCreatedAt(LocalDateTime.now());
        course.setVideo1(v1);
        course.setVideo2(v2);
        course.setVideo3(v3);
        repo.save(course);
    }


    @Bean
    @Transactional
    CommandLineRunner initCourses(CourseRepository courseRepository) {
        return args -> {
            // Ch·ªâ ch·∫°y n·∫øu ch∆∞a c√≥ kh√≥a h·ªçc n√†o
            if (courseRepository.count() > 0) {
                System.out.println("‚úÖ Courses already initialized.");
                return;
            }

            System.out.println("üå± Initializing courses...");

            createCourse(courseRepository,
                    "Nh·∫≠n bi·∫øt c√°c lo·∫°i ma t√∫y ph·ªï bi·∫øn",
                    "Cung c·∫•p ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ c√°c lo·∫°i ma t√∫y, t√°c h·∫°i v√† c√°ch nh·∫≠n di·ªán c√°c d·∫•u hi·ªáu ban ƒë·∫ßu.",
                    "H·ªçc sinh",
                    "Nh·∫≠n th·ª©c v·ªÅ ma t√∫y",
                    "https://conganthanhhoa.gov.vn/upload/81582/fck/pc04thang/2023_06_25_12_57_323.jpg", 150,
                    "https://www.youtube.com/embed/dQw4w9WgXcQ", // Link video m·∫´u
                    "https://www.youtube.com/embed/L_jWHffIx5E",
                    ""); // video3 ƒë·ªÉ tr·ªëng

            createCourse(courseRepository,
                    "K·ªπ nƒÉng t·ª´ ch·ªëi ma t√∫y hi·ªáu qu·∫£",
                    "Trang b·ªã c√°c k·ªπ nƒÉng giao ti·∫øp v√† t√¢m l√Ω v·ªØng v√†ng ƒë·ªÉ n√≥i 'KH√îNG' v·ªõi c√°c l·ªùi m·ªùi r·ªß r√™, c√°m d·ªó.",
                    "Sinh vi√™n",
                    "K·ªπ nƒÉng ph√≤ng tr√°nh",
                    "https://static.tuoitre.vn/tto/i/s626/2016/01/11/hinh-4-1452510165.jpg", 220,
                    "https://www.youtube.com/embed/jNQXAC9IVRw",
                    "", "");

            createCourse(courseRepository,
                    "Ph·ª• huynh ƒë·ªìng h√†nh c√πng con",
                    "D√†nh cho c√°c b·∫≠c cha m·∫π: C√°ch nh·∫≠n bi·∫øt thay ƒë·ªïi t√¢m sinh l√Ω c·ªßa con v√† t·∫°o m√¥i tr∆∞·ªùng gia ƒë√¨nh an to√†n.",
                    "Ph·ª• huynh",
                    "T√¢m l√Ω - h√†nh vi",
                    "https://img.lsvn.vn/resize/th/upload/2025/01/14/ma-tuy-va-y-chi-21203173.jpg", 95,
                    "https://www.youtube.com/embed/3tmd-ClpJxA",
                    "https://www.youtube.com/embed/a3Z7zEc7AXQ",
                    "");

            createCourse(courseRepository,
                    "X√¢y d·ª±ng m√¥i tr∆∞·ªùng h·ªçc ƒë∆∞·ªùng kh√¥ng ma t√∫y",
                    "D√†nh cho gi√°o vi√™n, c√°n b·ªô nh√† tr∆∞·ªùng. Cung c·∫•p c√°c c√¥ng c·ª• v√† chi·∫øn l∆∞·ª£c ƒë·ªÉ x√¢y d·ª±ng m√¥i tr∆∞·ªùng gi√°o d·ª•c l√†nh m·∫°nh.",
                    "Gi√°o vi√™n",
                    "Ch√≠nh s√°ch & C·ªông ƒë·ªìng",
                    "https://campustechnology.com/-/media/EDU/CampusTechnology/2019-Images/20191209online.jpg", 180,
                    "https://www.youtube.com/embed/C0DPdy98e4c",
                    "", "");

            System.out.println("‚úÖ 4 sample courses initialized.");
        };
    }

}